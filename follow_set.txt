0 program -> { dollar }
1 moduleDeclarations -> { DEF DRIVERDEF }
2 moduleDeclaration -> { DECLARE DEF DRIVERDEF }
3 otherModules -> { DRIVERDEF dollar }
4 driverModule -> { DEF dollar }
5 module -> { DEF DRIVERDEF dollar }
6 ret -> { START }
7 input_plist -> { SQBC }
8 N1 -> { SQBC }
9 output_plist -> { SQBC }
10 N2 -> { SQBC }
11 dataType -> { COMMA SEMICOL SQBC }
12 type -> { COMMA SQBC SEMICOL }
13 moduleDef -> { DEF dollar DRIVERDEF }
14 statements -> { END BREAK }
15 statement -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
16 ioStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
17 var -> { BC MUL DIV PLUS MINUS LT LE GT GE EQ NE AND OR SEMICOL }
18 whichId -> { BC MUL DIV PLUS MINUS LT LE GT GE EQ NE AND OR SEMICOL }
19 simpleStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
20 assignmentStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
21 whichStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
22 lvalueIDStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
23 lvalueARRStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
24 index -> { SQBC }
25 moduleReuseStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
26 optional -> { USE }
27 idlist -> { SEMICOL SQBC COLON }
28 N3 -> { SEMICOL SQBC COLON }
29 expression -> { SEMICOL }
30 arithmeticOrBooleanExpr -> { BC SEMICOL }
31 N7 -> { BC SEMICOL }
32 AnyTerm -> { AND OR BC SEMICOL }
33 N8 -> { AND OR BC SEMICOL }
34 arithmeticExpr -> { BC LT LE GT GE EQ NE AND OR SEMICOL }
35 N4 -> { BC LT LE GT GE EQ NE AND OR SEMICOL }
36 term -> { PLUS MINUS BC LT LE GT GE EQ NE AND OR SEMICOL }
37 N5 -> { PLUS MINUS BC LT LE GT GE EQ NE AND OR SEMICOL }
38 factor -> { MUL DIV PLUS MINUS BC LT LE GT GE EQ NE AND OR SEMICOL }
39 op1 -> { ID NUM RNUM BO }
40 op2 -> { ID NUM RNUM BO }
41 logicalOp -> { ID NUM RNUM BO }
42 relationalOp -> { ID NUM RNUM BO }
43 declareStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
44 condionalStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
45 caseStmts -> { DEFAULT END }
46 N9 -> { DEFAULT END }
47 value -> { COLON }
48 default1 -> { END }
49 iterativeStmt -> { GET_VALUE PRINT ID SQBO USE DECLARE SWITCH FOR WHILE END BREAK }
50 range -> { SQBC BC }
